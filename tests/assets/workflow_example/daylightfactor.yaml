type: workflow

name: daylight-factor

artifact_locations:
  - type: local
    name: project-folder
    root: /path/to/test

inputs:
  parameters:
    - name: worker
      description: Maximum number of workers for executing this workflow.
      value: 1   # this is the default value which can be overwritten
    - name: sensor-grid-path
      description: Relative path to sensor grid from project folder.
  artifacts:
    # This should be an artifacts since the content of the folder will be copied to
    # container for distributed runs
    - name: project-folder
      location: project-folder
      description: |
        Path to project folder for this study. This will make it easy to use relative
        path for other template inputs.
      path: '.'   # this is the default value which can be overwritten
      task_path: project

operators:
  - name: radiance-operator
    import_from: 'radiance_operator.yaml'
  - name: honeybee-radiance
    import_from: 'honeybee_radiance_operator.json'

templates:

  - name: generate-overcast-sky
    type: function
    description: Generate an overcast sky for daylight factor simulation.
    operator: honeybee-radiance
    command: honeybee radiance sky illuminance 100000 --folder sky
    outputs:
      artifacts:
        - name: sky
          location: project-folder
          path: asset/sky/100000_lux.sky
          task_path: sky/100000_lux.sky

        # Could also copy the sky-folder and just have that be the output artifact
        # - name: sky-folder
        #   path: '{{inputs.parameters.project-folder}}/sky'
        #   task_path: sky


  - name: split-grid
    type: function
    description: Split sensor grid into smaller grids.
    operator: honeybee-radiance
    inputs:
      parameters:
        - name: sensor-count
      artifacts:
        - name: sensor-grid
          location: project-folder
          path: asset/grid/grid.pts
          task_path: grid-file
    command: |
      honeybee radiance grid split grid-file {{inputs.parameters.sensor-count}} --folder grids-folder > grids_list.txt
    outputs:
      parameters:
        - name: grid-list
          path: grids_list.txt'
      artifacts:
        - name: grids
          location: project-folder
          path: asset/grid/split
          task_path: grids-folder

  - name: create-octree
    type: function
    description: |
      Create an octree from a list fo input files. Files should be separated from each
      other by a space.
    operator: radiance-operator
    inputs:
      artifacts:
        - name: sky-file
          location: project-folder
          path: sky.file # Note that this is overwritten in the DAG by the output artifact path from the generate-sky task template
          task_path: sky.file
        - name: scene-files
          location: project-folder
          path: model
          task_path: '.'
    command: |
      oconv \
        ./static/aperture/*.mat ./static/aperture/*.rad \
        ./static/aperture/interior/*.mat ./static/aperture/interior/*.rad  \
        ./static/nonopaque/*.mat ./static/nonopaque/*.rad \
        ./static/nonopaque/indoor/*.mat ./static/nonopaque/indoor/*.rad \
        ./static/nonopaque/outdoor/*.mat ./static/nonopaque/outdoor/*.rad \
        ./static/opaque/*.mat ./static/opaque/*.rad \
        ./static/opaque/indoor/*.mat ./static/opaque/indoor/*.rad \
        ./static/opaque/outdoor/*.mat  ./static/opaque/outdoor/*.rad \
        ./sky.file
        \> static_scene.oct
    outputs:
      artifacts:
        - name: octree-file
          location: project-folder
          path: output/octree/static_scene.oct
          task_path: static_scene.oct

  - name: trace-rays-daylight-factor
    type: function
    operator: radiance-operator
    inputs:
      parameters:
        - name: ray-tracing-options
          description: Radiance rtrace options for ray-tracing (e.g. -ab 3 -ad 2480)
          value: '-ab 2'
      artifacts:
        - name: octree-file
          location: project-folder
          path: output/octree/static_scene.oct
          task_path: octree.oct
        - name: grid-file
          location: project-folder
          # path: because this step is run in a loop we specify the path in the project folder dynamically in the DAG definition
          task_path: grid
    command: |
      rtrace -I -h {{inputs.parameters.ray-tracing-options}} octree.oct < grid | rcalc -e $1=(0.265*$1+0.67*$2+0.065*$3)*179/1000 > out
    outputs:
      artifacts:
        - name: result-file
          location: project-folder
          path: output/raw/
          task_path: out

  - name: merge-results
    type: function
    operator: honeybee-radiance
    inputs:
      artifacts:
        - name: input-folder
          location: project-folder
          path: output/raw/
          task_path: results-folder
    command: honeybee radiance grid merge results-folder results .res --folder out
    outputs:
      artifacts:
        - name: result-file
          location: project-folder
          path: output/postprocess/results.res
          task_path: "out/results.res"

flow:
  name: daylight-factor
  tasks:
    - name: generate-overcast-sky
      template: generate-overcast-sky

    - name: split-grid
      template: split-grid
      arguments:
        parameters:
          - name: sensor-count
            value: "{{ workflow.inputs.parameters.sensor-count }}"

    - name: create-octree
      template: create-octree
      dependencies:
        - generate-overcast-sky
      arguments:
        artifacts:
          - name: sky-file
            path: "{{ tasks.generate-sky.outputs.artifacts.sky.path }}"


    - name: trace-rays
      template: trace-rays-daylight-factor
      dependencies:
        - create-octree
        - split-grid
      arguments:
        parameters:
          - name: ray-tracing-options
            value: '-ab 2'
      artifacts:
        - name: octree-file
          path: "{{tasks.generate-octree.outputs.artifacts.octree-file}}"
        - name: grid-file
          path: "asset/grid/{{item}}" # item represents the individual string output from looping over output grids below
      loop: "{{tasks.generate-sky.outputs.parameters.split-grid}}"  # loop over the output grids

    - name: merge-results
      template: merge-results
      dependencies:
        - trace-rays

# this is not supported in Argo or is it?
outputs:
  artifacts:
    - name: daylight-factor-values
      path: "{{ tasks.merge-results.outputs.artifacts.result-file }}"
